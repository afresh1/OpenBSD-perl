--- ./configpm.orig	Wed May 13 13:19:28 2015
+++ ./configpm	Fri Sep 18 00:14:56 2015
@@ -87,6 +87,11 @@ $header_files =~ s/(?=.{64})   # If line is still over
 		   (.{1,64})\  # Split at the last convenient space
 		  /$1\n              /gx;
 
+# libpaths that should be truncated after the first path element
+my %Libpathtrunc = map {($_,$_)}
+                   qw(archlib archlibexp privlib privlibexp sitearch sitearchexp
+                      sitelib sitelibexp);
+
 # allowed opts as well as specifies default and initial values
 my %Allowed_Opts = (
     'glossary' => 1,  # --no-glossary  - no glossary file inclusion,
@@ -251,6 +256,9 @@ my %seen_quotes;
     }
     $in_v = $val !~ /$quote\n/;
     next if $in_v;
+
+    # XXX - should use PERLLIB_SEP, not hard-code ':'
+    $val =~ s/^([^:]+).*${quote}\w*$/$1${quote}/ if $Libpathtrunc{$name};
 
     s,/,::,g if $Extensions{$name};
 
--- ./lib/Config.t.orig	Wed May 13 13:19:30 2015
+++ ./lib/Config.t	Fri Sep 18 00:14:56 2015
@@ -272,8 +272,8 @@ foreach my $lib (qw(applibexp archlibexp privlibexp si
     }
     # So we expect to find it in @INC
 
-    ok (exists $orig_inc{$dir}, "Expect $lib '$dir' to be in \@INC")
-      or $failed++;
+    ok (exists $orig_inc{$_}, "Expect $lib '$_' to be in \@INC")
+      or $failed++ for split ':', $dir;
   }
 }
 _diag ('@INC is:', @orig_inc) if $failed;
