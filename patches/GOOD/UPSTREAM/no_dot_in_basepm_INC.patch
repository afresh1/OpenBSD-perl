--- ./dist/base/lib/base.pm.orig	Fri Dec 30 07:06:56 2016
+++ ./dist/base/lib/base.pm	Mon Jan 23 10:19:10 2017
@@ -3,9 +3,15 @@ package base;
 
 use strict 'vars';
 use vars qw($VERSION);
-$VERSION = '2.23';
+$VERSION = '2.23_01';
 $VERSION =~ tr/_//d;
 
+# simplest way to avoid indexing of the package: no package statement
+sub base::__inc_scope_guard::DESTROY {
+	my $noop = $_[0][0];
+	ref $_ and $_ == $noop and $_ = '.' for @INC;
+}
+
 # constant.pm is slow
 sub SUCCESS () { 1 }
 
@@ -91,13 +97,17 @@ sub import {
 
         next if grep $_->isa($base), ($inheritor, @bases);
 
-        # Following blocks help isolate $SIG{__DIE__} changes
+        # Following blocks help isolate $SIG{__DIE__} and @INC changes
         {
             my $sigdie;
             {
                 local $SIG{__DIE__};
                 my $fn = _module_to_filename($base);
-                eval { require $fn };
+                my $dotty = $INC[-1] eq '.' && ( $INC[-1] = sub {()} );
+                eval {
+                    my $redotty = $dotty && bless [ $dotty ], 'base::__inc_scope_guard';
+                    require $fn
+                };
                 # Only ignore "Can't locate" errors from our eval require.
                 # Other fatal errors (syntax etc) must be reported.
                 #
@@ -110,12 +120,26 @@ sub import {
                           || $@ =~ /Compilation failed in require at .* line [0-9]+(?:, <[^>]*> (?:line|chunk) [0-9]+)?\.\n\z/;
                 unless (%{"$base\::"}) {
                     require Carp;
+                    my @inc = $dotty ? @INC[0..$#INC-1] : @INC;
                     local $" = " ";
-                    Carp::croak(<<ERROR);
+                    my $e = <<ERROR;
 Base class package "$base" is empty.
     (Perhaps you need to 'use' the module which defines that package first,
-    or make that module available in \@INC (\@INC contains: @INC).
+    or make that module available in \@INC (\@INC contains: @inc).
 ERROR
+                    if ($dotty && -e $fn) {
+                        $e .= <<ERROS;
+    The file $fn does exist in the current directory.  But note
+    that base.pm, when loading a module, now ignores the current working
+    directory if it is the last entry in \@INC.  If your software worked on
+    previous versions of Perl, the best solution is to use FindBin to
+    detect the path properly and to add that path to \@INC.  As a last
+    resort, you can re-enable looking in the current working directory by
+    adding "use lib '.'" to your code.
+ERROS
+                    }
+                    $e =~ s/\n\z/)\n/;
+                    Carp::croak($e);
                 }
                 $sigdie = $SIG{__DIE__} || undef;
             }
--- ./dist/base/t/lib/BaseIncDoubleExtender.pm.orig	Mon Jan 23 10:19:10 2017
+++ ./dist/base/t/lib/BaseIncDoubleExtender.pm	Mon Jan 23 10:19:10 2017
@@ -0,0 +1,9 @@
+package BaseIncDoubleExtender;
+
+BEGIN { ::ok( $INC[-1] ne '.', 'no trailing dot in @INC during module load from base' ) }
+
+use lib 't/lib/blahdeblah';
+
+push @INC, 't/lib/on-end';
+
+1;
--- ./dist/base/t/lib/BaseIncExtender.pm.orig	Mon Jan 23 10:19:10 2017
+++ ./dist/base/t/lib/BaseIncExtender.pm	Mon Jan 23 10:19:10 2017
@@ -0,0 +1,7 @@
+package BaseIncExtender;
+
+BEGIN { ::ok( $INC[-1] ne '.', 'no trailing dot in @INC during module load from base' ) }
+
+use lib 't/lib/blahblah';
+
+1;
--- ./dist/base/t/incdot.t.orig	Mon Jan 23 10:19:10 2017
+++ ./dist/base/t/incdot.t	Mon Jan 23 10:19:10 2017
@@ -0,0 +1,19 @@
+#!/usr/bin/perl -w
+
+use strict;
+
+use base ();
+
+use Test::More tests => 2;
+
+if ($INC[-1] ne '.') { push @INC, '.' }
+
+my $inc = quotemeta "@INC[0..$#INC-1]";
+
+eval { 'base'->import("foo") };
+like $@, qr/\@INC contains: $inc\).\)/,
+    'Error does not list final dot in @INC (or mention use lib)';
+eval { 'base'->import('t::lib::Dummy') };
+like $@, qr<\@INC contains: $inc\).\n(?x:
+           )    The file t/lib/Dummy\.pm does exist in the current direct>,
+    'special cur dir message for existing files in . that are ignored';
--- ./dist/base/t/incmodified-vs-incdot.t.orig	Mon Jan 23 10:19:10 2017
+++ ./dist/base/t/incmodified-vs-incdot.t	Mon Jan 23 10:19:10 2017
@@ -0,0 +1,27 @@
+#!/usr/bin/perl -w
+
+use strict;
+use Test::More tests => 10;  # one test is in each BaseInc* itself
+
+use lib 't/lib';
+
+# make it look like an older perl
+BEGIN { push @INC, '.' if $INC[-1] ne '.' }
+
+use base 'BaseIncExtender';
+
+BEGIN {
+    is $INC[0], 't/lib/blahblah', 'modules loaded by base can prepend entries to @INC';
+    is $INC[1], 't/lib', 'previously prepended additional @INC entry remains';
+    is $INC[-1], '.', 'dot still at end @INC after using base';
+}
+
+use base 'BaseIncDoubleExtender';
+
+BEGIN {
+    is $INC[0], 't/lib/blahdeblah', 'modules loaded by base can prepend entries to @INC';
+    is $INC[1], 't/lib/blahblah', 'previously prepended additional @INC entry remains';
+    is $INC[2], 't/lib', 'previously prepended additional @INC entry remains';
+    is $INC[-2], '.', 'dot still at previous end of @INC after using base';
+    is $INC[-1], 't/lib/on-end', 'modules loaded by base can append entries to @INC';
+}
--- ./dist/Module-CoreList/lib/Module/CoreList.pm.orig	Sat Jan 14 09:58:08 2017
+++ ./dist/Module-CoreList/lib/Module/CoreList.pm	Mon Jan 23 10:19:10 2017
@@ -13683,6 +13683,7 @@ for my $version ( sort { $a <=> $b } keys %released ) 
             'Test'                  => '1.28_01',
             'Test::Harness'         => '3.36_01',
             'XSLoader'              => '0.22',
+            'base'                  => '2.23_01',
             'bigint'                => '0.42_01',
             'bignum'                => '0.42_01',
             'bigrat'                => '0.42_01',
--- ./pod/perldelta.pod.orig	Sat Jan 14 10:28:39 2017
+++ ./pod/perldelta.pod	Mon Jan 23 10:19:10 2017
@@ -43,11 +43,42 @@ This prevents an attacker injecting an optional module
 another user where the current directory is writable by the attacker, e.g. the
 F</tmp> directory.
 
-In most cases this removal should not cause problems, but difficulties were
-encountered with L<base>, which treats every module name supplied as optional.
-These difficulties have not yet been resolved, so for this release there are no
-changes to L<base>.  We hope to have a fix for L<base> in Perl 5.24.2.
+In most cases this removal should not cause problems, the exception being
+L<base>.
 
+L<base> treats every module name supplied as optional.  If you have
+applications that use L<base> to load non-optional modules from the current
+directory you will need to modify your code or environment.
+
+If your code always trusts the contents of the current directory, the simplest
+change is adding F<"."> to C<PERL5LIB>:
+
+  # for Bourne shell and similar
+  set PERL5LIB=.
+  export PERL5LIB
+
+If you do B<not> trust the current directory this will open your code up to
+attacks on any module load, not just optional modules.  You may want to add the
+absolute path of your application's module directory to C<PERL5LIB> instead.
+
+Alternatively, you can change your code, either to add the directory with your
+binary to C<@INC>:
+
+  use FindBin;
+  use lib $FindBin::Bin;
+
+or switch to L<parent>, which requires an explicit parameter for optional
+modules:
+
+  use parent 'Nonoptional::Module';
+
+though this will have the same problem if the current directory is removed from
+C<@INC> in Perl 5.26.
+
+Also, since L<base> now localizes C<@INC> when loading modules, changes to
+C<@INC> in the loaded module will be discarded when C<@INC> is restored to its
+previous value.
+
 To protect your own code from this attack, either remove the default F<".">
 entry from C<@INC> at the start of your script, so:
 
@@ -89,6 +120,10 @@ that you submit a report.  See L</Reporting Bugs> belo
 =item *
 
 L<Archive::Tar> has been upgraded from version 2.04 to 2.04_01.
+
+=item *
+
+L<base> has been upgraded from version 2.23 to 2.23_01.
 
 =item *
 
--- ./Porting/Maintainers.pl.orig	Fri Dec 30 07:57:19 2016
+++ ./Porting/Maintainers.pl	Mon Jan 23 10:19:10 2017
@@ -189,6 +189,10 @@ use File::Glob qw(:case);
     'base' => {
         'DISTRIBUTION' => 'RJBS/base-2.23.tar.gz',
         'FILES'        => q[dist/base],
+        'CUSTOMIZED'   => [
+            # https://rt.perl.org/Ticket/Display.html?id=127834
+            qw( lib/base.pm )
+        ],
     },
 
     'bignum' => {
--- ./t/porting/customized.dat.orig	Fri Dec 30 07:57:35 2016
+++ ./t/porting/customized.dat	Mon Jan 23 10:19:10 2017
@@ -159,6 +159,7 @@ Test::Harness cpan/Test-Harness/lib/TAP/Parser/YAMLish
 Test::Harness cpan/Test-Harness/lib/TAP/Parser/YAMLish/Writer.pm bf1fbfff9720330886651f183959a5db56daeea0
 Test::Harness cpan/Test-Harness/lib/Test/Harness.pm da2d76ba673372da129060c9d0adb8cf0d91f9f7
 autodie cpan/autodie/t/mkdir.t 9e70d2282a3cc7d76a78bf8144fccba20fb37dac
+base dist/base/lib/base.pm 8db115a702f759526b031f90cc572d97086978a6
 bignum cpan/bignum/lib/bigint.pm 56330354995409dab5073ea92d749f8727e265db
 bignum cpan/bignum/lib/bignum.pm e999973f78e6be12282c11bb6328246b31a9576b
 bignum cpan/bignum/lib/bigrat.pm 7fccc9df30e43dbbae6e5ea91b26c8046545c9a9
--- ./MANIFEST.orig	Fri Dec 30 07:04:44 2016
+++ ./MANIFEST	Mon Jan 23 10:19:10 2017
@@ -3007,7 +3007,11 @@ dist/base/t/fields-5_6_0.t	See if fields work
 dist/base/t/fields-5_8_0.t	See if fields work
 dist/base/t/fields-base.t	See if fields work
 dist/base/t/fields.t		See if fields work
+dist/base/t/incdot.t		Test how base.pm handles '.' in @INC
+dist/base/t/incmodified-vs-incdot.t		Test base.pm's @INC fiddling
 dist/base/t/isa.t		See if base's behaviour doesn't change
+dist/base/t/lib/BaseIncDoubleExtender.pm	Test module for base.pm
+dist/base/t/lib/BaseIncExtender.pm		Test module for base.pm
 dist/base/t/lib/Broken.pm	Test module for base.pm
 dist/base/t/lib/Dummy.pm	Test module for base.pm
 dist/base/t/lib/HasSigDie.pm	Module for testing base.pm
