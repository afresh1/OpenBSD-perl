--- ./dist/PathTools/Cwd.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/Cwd.pm	Thu May  5 15:47:48 2016
@@ -171,7 +171,7 @@ use strict;
 use Exporter;
 use vars qw(@ISA @EXPORT @EXPORT_OK $VERSION);
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 my $xs_version = $VERSION;
 $VERSION =~ tr/_//;
 
--- ./dist/PathTools/Cwd.xs.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/Cwd.xs	Thu May  5 15:47:48 2016
@@ -512,6 +512,7 @@ THX_unix_canonpath(pTHX_ SV *path)
     *o = 0;
     SvPOK_on(retval);
     SvCUR_set(retval, o - SvPVX(retval));
+    SvTAINT(retval);
     return retval;
 }
 
--- ./dist/PathTools/lib/File/Spec/Cygwin.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Cygwin.pm	Thu May  5 15:47:48 2016
@@ -4,7 +4,7 @@ use strict;
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 @ISA = qw(File::Spec::Unix);
--- ./dist/PathTools/lib/File/Spec/Epoc.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Epoc.pm	Thu May  5 15:47:48 2016
@@ -3,7 +3,7 @@ package File::Spec::Epoc;
 use strict;
 use vars qw($VERSION @ISA);
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 require File::Spec::Unix;
--- ./dist/PathTools/lib/File/Spec/Functions.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Functions.pm	Thu May  5 15:47:48 2016
@@ -5,7 +5,7 @@ use strict;
 
 use vars qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS $VERSION);
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 require Exporter;
--- ./dist/PathTools/lib/File/Spec/Mac.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Mac.pm	Thu May  5 15:47:48 2016
@@ -4,7 +4,7 @@ use strict;
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 @ISA = qw(File::Spec::Unix);
--- ./dist/PathTools/lib/File/Spec/OS2.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/OS2.pm	Thu May  5 15:47:48 2016
@@ -4,7 +4,7 @@ use strict;
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 @ISA = qw(File::Spec::Unix);
--- ./dist/PathTools/lib/File/Spec/Unix.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Unix.pm	Thu May  5 15:47:48 2016
@@ -3,7 +3,7 @@ package File::Spec::Unix;
 use strict;
 use vars qw($VERSION);
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 my $xs_version = $VERSION;
 $VERSION =~ tr/_//;
 
--- ./dist/PathTools/lib/File/Spec/VMS.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/VMS.pm	Thu May  5 15:47:48 2016
@@ -4,7 +4,7 @@ use strict;
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 @ISA = qw(File::Spec::Unix);
--- ./dist/PathTools/lib/File/Spec/Win32.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec/Win32.pm	Thu May  5 15:47:48 2016
@@ -5,7 +5,7 @@ use strict;
 use vars qw(@ISA $VERSION);
 require File::Spec::Unix;
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 @ISA = qw(File::Spec::Unix);
--- ./dist/PathTools/lib/File/Spec.pm.orig	Sat Jan 10 04:06:37 2015
+++ ./dist/PathTools/lib/File/Spec.pm	Thu May  5 15:47:48 2016
@@ -3,7 +3,7 @@ package File::Spec;
 use strict;
 use vars qw(@ISA $VERSION);
 
-$VERSION = '3.48_01';
+$VERSION = '3.48_02';
 $VERSION =~ tr/_//;
 
 my %module = (MacOS   => 'Mac',
--- ./dist/PathTools/t/taint.t.orig	Sat Dec 27 03:48:49 2014
+++ ./dist/PathTools/t/taint.t	Thu May  5 15:47:48 2016
@@ -12,7 +12,7 @@ use Test::More;
 BEGIN {
     plan(
         ${^TAINT}
-        ? (tests => 17)
+        ? (tests => 21)
         : (skip_all => "A perl without taint support")
     );
 }
@@ -34,3 +34,20 @@ foreach my $func (@Functions) {
 
 # Previous versions of Cwd tainted $^O
 is !tainted($^O), 1, "\$^O should not be tainted";
+
+{
+    # [perl #126862] canonpath() loses taint
+    my $tainted = substr($ENV{PATH}, 0, 0);
+    # yes, getcwd()'s result should be tainted, and is tested above
+    # but be sure
+    ok tainted(File::Spec->canonpath($tainted . Cwd::getcwd)),
+        "canonpath() keeps taint on non-empty string";
+    ok tainted(File::Spec->canonpath($tainted)),
+        "canonpath() keeps taint on empty string";
+
+    (Cwd::getcwd() =~ /^(.*)/);
+    my $untainted = $1;
+    ok !tainted($untainted), "make sure our untainted value is untainted";
+    ok !tainted(File::Spec->canonpath($untainted)),
+        "canonpath() doesn't add taint to untainted string";
+}
