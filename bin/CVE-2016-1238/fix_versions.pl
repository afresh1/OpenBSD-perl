#!/usr/bin/perl
use strict;
use warnings;

use File::Find qw( find );

my $current_file_to_patch;
my %files_to_fix;

open my $patch_fh, '<', '/home/afresh1/OpenBSD-perl/patches/GOOD/UPSTREAM/CVE-2016-1238.patch' or die $!;
while (readline($patch_fh)) {
	if (m{^\+\+\+ ([^/]+/[^/]+)}) {
		$current_file_to_patch = $1;
		chomp $current_file_to_patch;
		$current_file_to_patch =~ s{libnet/lib}{libnet};
		$files_to_fix{$current_file_to_patch} = 1;
	}
}
close $patch_fh;

my %versions;
find sub { fix_file($_, \%versions) }, map { "./$_" } sort keys %files_to_fix;

print "$_: $versions{$_}{old} -> $versions{$_}{new}\n";

#fix_test_file( 'dist/base/t/version.t' )

sub fix_test_file {
	my ($file, $v) = @_;

	open my $ifh, '<', $file or die "$file: $!";
	open my $ofh, '>', "$file.new" or die "$file.new: $!";
	while (readline($ifh)) {
		s/\Q$v->{old}/$v->{new}/g;
		print $ofh $_;
	}
	rename $file, "$file.orig" or die $!
	    unless -e "$file.orig";
	rename "$file.new", $file or die $!;
}

sub fix_file {
	my ($file, $versions) = @_;

	if ( -d $file) {
		$File::Find::prune = 1 if $file eq 't';
		$File::Find::prune = 1 if $file eq 'blib';
		$File::Find::prune = 1 if $File::Find::name =~ m{\bdist/IO/lib/IO$};
		return;
	}

	return if $file =~ /\.orig$/;
	return if $file =~ /\.t$/;
	return if $file =~ /h2ph\.PL/;
	return if $file =~ /ppport\.h$/;

	if (!-e $file) {
		warn "Unable to find $file\n";
		return;
	}

	my $in_pod;
	my $matched;
	open my $ifh, '<', $file or die "$file: $!";
	open my $ofh, '>', "$file.new" or die "$file.new: $!";
	while (readline($ifh)) {
		if (/^=cut\b/) {
			$in_pod = 0;
		}
		elsif (/^=\w/) {
			$in_pod = 1;
		}
		elsif (/\$[A-Za-z:]*VERSION\s*=\s*['"]?([\d\._]+)/ and not $in_pod) {
			my $old_version = $1;
			my $new_version = $old_version;

			my $ext = 1;
			if ($new_version =~ s/_0*(\d+)$//) {
				$ext = $1 + 1;
			}
			$new_version = sprintf "%s_%02d", $new_version, $ext;

			warn "$file: $old_version -> $new_version\n";
			$matched = 1;
			$versions->{$file} = {
			     old => $old_version,
			     new => $new_version,
			};

			s/\Q$old_version/$new_version/;
		}
		print $ofh $_;
	}
	close $ifh;
	close $ofh;

	if ($matched) {
		rename $file, "$file.orig" or die $!
		    unless -e "$file.orig";
		rename "$file.new", $file or die $!;
	}
	else {
		unlink "$file.new"
	}
}

1;
