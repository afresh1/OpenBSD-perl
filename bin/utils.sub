#!/bin/sh

SRCDIR=$( dirname $BINDIR )
WRKDIR=$( pwd )
PERL_BASE=perl-5.28.2

install_local_files() {
    cp -Rf ${SRCDIR}/files/* ./
}

apply_patches_in_dir() {
    local dir=$1
    local name=${2:-*.patch}
    local _file;

    find $dir -name "$name" -print | sort | while read _file; do
        echo "Applying $_file"
        patch -fEp0 -i $_file
	if [ $( find . -name '*.rej' | wc -l ) -ne 0 ]; then
		echo $_file failed!
		exit 1;
	fi
    done
}

apply_good_patches() {
	apply_patches_in_dir ${SRCDIR}/patches/GOOD "$@"
}

apply_required_patches() {
	dir="${SRCDIR}/patches/REQUIRED"
	[ -d "$dir" ] && return apply_patches_in_dir "$dir"
	true
}

do_extract_perl() {
    if [ ! -e ${SRCDIR}/${PERL_BASE}.tar.gz ]; then
        echo Please put ${PERL_BASE}.tar.gz in $SRCDIR >&2
        exit 255
    fi

    if [ -e "$PERL_BASE" ]; then
        echo "Removing old perl srcdir"
        mkdir -p old
        chmod u=rwx $PERL_BASE # so we are allowed to move
        mv -f $PERL_BASE old
        chmod -R u+rwX old  # so we are allowed to rm
        rm -rf old &
    fi

    echo Extracting ${PERL_BASE}.tar.gz
    tar xzf "$SRCDIR/${PERL_BASE}.tar.gz"
}

do_patch_perl() {
    apply_required_patches || exit 1

    [ "$NO_LOCAL_PATCHES" ] && return

    echo Copying local files
    install_local_files || exit 1

    echo Applying local patches
    apply_good_patches "$@" || exit 1
}

do_build_perl() {
    [ "$NO_LOCAL_PATCHES" ] && NO_BSD_WRAPPER=1

    if [ -z "$NO_BSD_WRAPPER" ]; then
        echo make obj
        echo "make $J -f Makefile.bsd-wrapper obj"
        make $J -f Makefile.bsd-wrapper obj

        echo Building
        echo "make $J -f Makefile.bsd-wrapper all"
        make $J -f Makefile.bsd-wrapper all

        # Some of my test machines are pretty slow
        export PERL_TEST_TIME_OUT_FACTOR=20

        echo Testing
        echo "make $J -f Makefile.bsd-wrapper test"
        make $J -f Makefile.bsd-wrapper test

    else
        echo Configuring
        sh ./Configure -de

        echo Building
        make

        echo Testing
        make test
    fi
}

test_build_success() {
    local log=$1
    local status=`tail -5 $log | grep 'All tests successful.'`

    if [ -n "$status" ]; then
        echo "I'm winning, I'm winning!"
        return 0
    else
        return 1
    fi
}

cvs_rm_add() {
    local src=$1
    local dst=$2

    # Because we pass wildcards to find in a variable
    set -f

    chmod -R u+w $dst

    # Remove merge cruft, we know what we want
    find $dst -name '.#*' -exec rm -f {} \+

    local skip_files="! -name CVS ! -path */CVS/*"
    if [ -n "$SKIP_LIST" ]; then
        for f in $SKIP_LIST; do
             [ -e $src/$f ] && continue
             skip_files="$skip_files ! -path $f";
        done
    fi

    # remove any files that are not in the new perl
    # Need to cd into $dst so `test -e` sees the correct path
    cd $dst
    find . -type f $skip_files \
        ! -exec test -e $OLDPWD/$src/{} \; \
    -exec cvs rm -f {} \+
    cd $OLDPWD

    # copy in the new files
    set +f # need to glob *this*
    cp -r $src/.* $src/* $dst
    set -f

    # add any directories that aren't in CVS
    find $dst -type d $skip_files \
        ! -exec test -e {}/CVS \; \
    -exec cvs add {} \+

    # Add any files that aren't in CVS
    find $dst -type f $skip_files \
        ! -execdir grep -q /{}/ CVS/Entries \; \
    -exec cvs add -ko {} \+
}

# Extract a relatively up-to-date perl cvs tree
# This file was generated by having a cvsync'd tree and
# cd /path/to/cvsynced/root/ && tar czvf ${SRCDIR}/openbsd-cvs-src.tar.gz cvs/CVSROOT cvs/src/gnu/usr.bin/perl
# you can also:
# $ mkdir -p cvs/src/gnu/usr.bin
# $ rsync -aP --delete rsync://obsdacvs.cs.toronto.edu/obsdcvs/src/gnu/usr.bin/perl cvs/src/gnu/usr.bin/
# $ tar czf openbsd-cvs-src.tar.gz cvs

setup_cvsroot() {
if [ ! "$CVSROOT" ]; then
    [ -e cvs ] && mkdir old && mv cvs old && rm -rf old &
    tar xzf $SRCDIR/openbsd-cvs-src.tar.gz
    CVSROOT=${PWD}/cvs

    mkdir -p ${CVSROOT}/CVSROOT

    # avoid trying to send email
    for f in commit_prep{,2} log_accum{,2}; do
        echo "#!/usr/bin/true" > $CVSROOT/CVSROOT/$f
        chmod +x $CVSROOT/CVSROOT/$f
    done
fi
export CVSROOT
}
