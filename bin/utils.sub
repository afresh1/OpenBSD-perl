#!/bin/sh

SRCDIR=$( dirname $BINDIR )
WRKDIR=$( pwd )
PERL_BASE=perl-5.24.1-RC5

if [ ! -e ${SRCDIR}/${PERL_BASE}.tar.gz ]; then
    echo Please put ${PERL_BASE}.tar.gz in $SRCDIR >&2
    exit 255
fi

install_local_files() {
    cp -Rf ${SRCDIR}/files/* ./
}


apply_good_patches() {
    local name=${1:-*.patch}
    local _file;

    find ${SRCDIR}/patches/GOOD -name "$name" -print | while read _file; do
        patch -fEp0 -i $_file
	if [ $( find . -name '*.rej' | wc -l ) -ne 0 ]; then
		echo $_file failed!
		exit 1;
	fi
    done
}

do_extract_perl() {
    if [ -e "$PERL_BASE" ]; then
        echo "Removing old perl srcdir"
        mkdir -p old
        chmod +w $PERL_BASE # so we are allowed to move
        mv -f $PERL_BASE old
        chmod -R +w old  # so we are allowed to rm
        rm -rf old &
    fi

    echo Extracting ${PERL_BASE}.tar.gz
    tar xzf "$SRCDIR/${PERL_BASE}.tar.gz"
}

do_patch_perl() {
    [ "$NO_LOCAL_PATCHES" ] && return

    echo Copying local files
    install_local_files || exit 1

    echo Applying local patches
    apply_good_patches "$@" || exit 1
}

do_build_perl() {
    [ "$NO_LOCAL_PATCHES" ] && NO_BSD_WRAPPER=1

    if [ -z "$NO_BSD_WRAPPER" ]; then
        echo make obj
        echo "make $J -f Makefile.bsd-wrapper obj"
        make $J -f Makefile.bsd-wrapper obj

        echo Configure
        echo "make $J -f Makefile.bsd-wrapper depend"
        make $J -f Makefile.bsd-wrapper depend

        echo Building
        echo "make $J -f Makefile.bsd-wrapper all"
        make $J -f Makefile.bsd-wrapper all

        echo Testing
        echo "make $J -f Makefile.bsd-wrapper test"
        make $J -f Makefile.bsd-wrapper test

    else
        echo Configuring
        sh ./Configure -de

        echo Building
        make

        echo Testing
        make test
    fi
}

test_build_success() {
    local log=$1
    local status=`tail -5 $log | grep 'All tests successful.'`

    if [ -n "$status" ]; then
        echo "I'm winning, I'm winning!"
        return 0
    else
        return 1
    fi
}

cvs_rm_add() {
    local src=$1
    local dst=$2

    # Because we pass wildcards to find in a variable
    set -f

    # Remove merge cruft, we know what we want
    find $dst -name '.#*' -exec rm -f {} \+

    local skip_files="! -name CVS ! -path */CVS/*"
    if [ -n "$SKIP_FILES" ]; then
        cd $SRCDIR/files
        for f in $( find . -type f | sed -e 's/^\./\*/' ); do
            skip_files="$skip_files ! -path $f"
        done
        cd $OLDPWD
    fi

    local not_unicore=''
    if [ -n "$SKIP_UNICORE_PATCH" ]; then
        not_unicore="! -path */unicore/lib ! -path */unicore/lib/*"
        not_unicore="! -path */unicore/To  ! -path */unicore/To/* $not_unicore"
        for f in \
            CombiningClass.pl \
            Decomposition.pl \
            Heavy.pl \
            Name.pl \
            Name.pm \
            TestProp.pl \
            UCD.pl \
            perluniprops.pod \
            mktables.lst \
        ; do not_unicore="$not_unicore ! -name $f"; done
    fi

    # remove any files that are not in the new perl
    # Need to cd into $dst so `test -e` sees the correct path
    cd $dst
    find . -type f $skip_files $not_unicore \
        ! -exec test -e $OLDPWD/$src/{} \; \
    -exec cvs rm -f {} \+
    cd $OLDPWD

    # copy in the new files
    set +f # need to glob *this*
    cp -r $src/* $dst
    set -f

    # add any directories that aren't in CVS
    find $dst -type d $skip_files $not_unicore \
        ! -exec test -e {}/CVS \; \
    -exec cvs add {} \+

    # Add any files that aren't in CVS
    find $dst -type f $skip_files $not_unicore \
        ! -execdir grep -q /{}/ CVS/Entries \; \
    -exec cvs add -kb {} \+
}

# Extract a relatively up-to-date perl cvs tree
# This file was generated by having a cvsync'd tree and
# cd /path/to/cvsynced/root/ && tar czvf ${SRCDIR}/openbsd-cvs-src.tar.gz cvs/CVSROOT cvs/src/gnu/usr.bin/perl
setup_cvsroot() {
if [ ! "$CVSROOT" ]; then
    [ -e cvs ] && mkdir old && mv cvs old && rm -rf old &
    tar xzf $SRCDIR/openbsd-cvs-src.tar.gz
    CVSROOT=${PWD}/cvs

    # avoid trying to send email
    for f in commit_prep{,2} log_accum{,2}; do
        echo "#!/usr/bin/true" > $CVSROOT/CVSROOT/$f
    done
fi
export CVSROOT
}
