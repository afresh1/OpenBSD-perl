#!/usr/bin/perl
use strict;
use warnings;
use File::Find;

use 5.010;

chdir 'obj' if -d 'obj';  # Look in the obj dir if we have one

my ($bsdwrapper) = grep { -e } 'Makefile.bsd-wrapper1',
    '../Makefile.bsd-wrapper1';

die "Couldn't find Makefile.bsd-wrapper1" unless $bsdwrapper;

my %proper_page = (
    'utils/splain' => 'splain',
);

open my $fh, '<', $bsdwrapper or die "Couldn't open $bsdwrapper: $!";

# Find the right section
while (<$fh>) { last if /for page sect file in/ }

my %old_pod;
while (<$fh>) {
    my ($page, $section, $file, $slash) = split;
    $old_pod{ $page } = {
        file    => $file,
        section => $section,
    };
    last unless $slash;
}
close $fh;


my %new_pod;
find( sub {
    if ($_ eq 'Porting') {
        $File::Find::prune = 1;
        return;
    }

    return unless -f $_;
    my $file = $File::Find::name;

    return if /\.t(?:xt)$/; # skip txt files and tests
    return if /\.orig$/;    # skip patch files
    return if $file =~ m{/t/}; # or files in test dirs
    return if $file =~ m{/ext/}; # or in an ext dir
    return if /symbian/; # don't need that

    # Don't find things in the source, only installed
    return if $file =~ m{^dist/};
    return if $file =~ m{^cpan/};

    # Remove leading ./ and optional obj/
    $file =~ s{^\./(?:obj/)?}{};

    my $page;

    if ($proper_page{$file}) {
        $page = $proper_page{$file};
    }
    elsif ($file =~ m{pod/(perl\w+).pod}) {
        $page = $1;
    }
    else {
        open my $fh, '<', $_ or die "Couldn't open $File::Find::name";
        my $found_pod = 0;

        while (<$fh>) {
            if (/^=head1\s+NAME/) {
                $found_pod = 1;
                next;
            }

            next unless $found_pod;
            last if /^=\w+/;

            if (/^(\S+)/) {
                $page = $1;
                last;
            }
        }

        return unless $found_pod;
        return unless $page;

        $page =~ s/^\w\<//;    # strip possible B<
        $page =~ s/[^\w:]//g;
    }

    return unless $page;

    my $section
        = exists $old_pod{$page} ? $old_pod{$page}{section}
        : $file =~ /\.pm$/       ? '3p'
        :                          '1';

    $new_pod{$page} = {
        file    => $file,
        section => $section,
    };
}, '.');

my $changed = 0;
my @file_list;
foreach my $page (sort { 
    $new_pod{$a}{section} cmp $new_pod{$b}{section}
        || lc($a) cmp lc($b) } keys %new_pod) {
    unless ($old_pod{$page}) {
        say "New page: $page [$new_pod{$page}{file}][$new_pod{$page}{section}]";
        $changed++;
    }
    push @file_list, [ $page, @{ $new_pod{$page} }{qw( section file )} ];
}

foreach my $page (sort { 
    $old_pod{$a}{section} cmp $old_pod{$b}{section}
        || $a cmp $b } keys %old_pod) {
    unless ($new_pod{$page}) {
        say "Lost page: $page [$old_pod{$page}{file}][$old_pod{$page}{section}]";
        $changed++;
    }
}

unless ($changed) {
    say "No changes";
    exit;
}

my $num_tabs   = 5;
my $tab_length = 8;
open my $ofh, '>', $bsdwrapper . '.new' or die $!;
open my $ifh, '<', $bsdwrapper          or die $!;
while (<$ifh>) {
    if (/for page sect file in/) {
        print $ofh $_;

        foreach my $i ( 0 .. $#file_list ) {
            my $tabs = (
                (     ( $tab_length * $num_tabs )
                    - ( length( $file_list[$i][0] . $file_list[$i][1] ) + 5 )
                ) / $tab_length
            );
            $tabs++ if $tabs != int $tabs;
            $tabs = "\t" x ( int($tabs) || 1);

            my $fmt = "    %s %s$tabs%s";
            $fmt .= $i == $#file_list ? "\n" : " \\\n";
            printf $ofh $fmt, @{ $file_list[$i] };
        }

        while (<$ifh>) { last unless m{\\$} }
        next;
    }
    print $ofh $_;
}
close $ifh;
close $ofh;

say "Created $bsdwrapper.new";
