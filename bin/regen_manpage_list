#!/usr/bin/perl
use strict;
use warnings;
use File::Find;

use Cwd;
use 5.010;

my $root = getcwd;

my $bsdwrapper = "$root/Makefile.bsd-wrapper1";
die "Couldn't find Makefile.bsd-wrapper1" unless -e $bsdwrapper;

chdir 'obj' if -d 'obj';  # Look in the obj dir if we have one

my %proper_page = (
    'utils/splain'          => 'splain',
    'libnetFAQ'             => 'Net::libnetFAQ',
    'Test::Harness::Beyond' => 'TAP::Harness::Beyond',
);

my %sections = (
    CORE        => '3p',
    perlfaq     => '1',
    perl5db     => '3p',
    perldebguts => '3p',
);

my %skip_page = map { $_ => 1 } qw(
    json_pp
    ptar
    ptardiff
    ptargrep
    shasum
    zipdetails

    Changes
    HACKERS
    INSTALL
    TODO
    buildperl
    exetype
    installhtml
    make_patchnum
    mkppport
    perlartistic
    perlcn
    perldtrace
    perlebcdic
    perlglobbat
    perlgpl
    perljp
    perlko
    perltw
    pl2bat
    ppporth
    regenerate
    runperlbat
    soak

    perlaix
    perlamiga
    perlandroid
    perlbs2000
    perlcygwin
    perlfreebsd
    perlhaiku
    perlhpux
    perlhurd
    perlirix
    perllinux
    perlmacosx
    perlos2
    perlos390
    perlos400
    perlplan9
    perlqnx
    perlriscos
    perlsolaris
    perltru64
    perlvms
    perlvos
    perlwin32

    Configure
    Encode::_Name_
    Encode::MIME::NAME
    Haiku
    OS2::DLL
    OS2::ExtAttr
    OS2::PrfDB
    OS2::Process
    OS2::REXX
    Sys::Syslog::Win32
    Win32
    Win32API::File
    pod_file
);

open my $fh, '<', $bsdwrapper or die "Couldn't open $bsdwrapper: $!";

# Find the right section
while (<$fh>) { last if /for page sect file in/ }

my %old_pod;
while (<$fh>) {
    my ($page, $section, $file, $slash) = split;
    $old_pod{ $page } = {
        file    => $file,
        section => $section,
    };
    last unless $slash;
}
close $fh;


my %new_pod;
my %seen_skip;
my $wanted = sub {
    my $look_in = shift;
    my $file = $File::Find::name;

    if ($_ eq 'Porting' or $file =~ m#/Pod-Perldoc/corpus$#) {
        $File::Find::prune = 1;
        return;
    }

    return unless -f $_;

    return if /\.t(?:xt)$/; # skip txt files and tests
    return if /\.orig$/;    # skip patch files
    return if $file =~ m{\.t$}; # skip test files
    return if $file =~ m{/t/}; # or files in test dirs
    return if $file =~ m{/ext/}; # or in an ext dir
    return if $file =~ m{symbian}; # don't need that

    # Remove leading ./ and optional obj/
    $file =~ s{^\./(?:obj/)?}{};

    # Don't find things in the source, only installed
    return if $look_in ne 'dist' && $file =~ m{^dist/};
    return if $look_in ne 'cpan' && $file =~ m{^cpan/};

    # Nothing in here is useful and can hide correct source of manuals
    return if $file =~ m{^regen/};
    return if $file =~ m{^hints/};
    return if $file =~ m{^Cross/};

    my $pm = $_;
    $pm =~ s/\.pod$/\.pm/;
    $pm = $_ unless -e $pm;

    my $page;

    if ($proper_page{$file}) {
        $page = $proper_page{$file};
    }
    elsif ($file =~ m{pod/(perl\w+).pod}) {
        $page = $1;
    }
    else {
        open my $fh, '<', $_ or die "Couldn't open $File::Find::name";
        my $found_pod = 0;

        while (<$fh>) {
            if (/^=head1\s+NAME/) {
                $found_pod = 1;
                next;
            }

            next unless $found_pod;
            last if /^=head/;

            if (/^(\S+)\s.*-+\s/) {
                $page = $1;
                last;
            }
        }

        return unless $found_pod;
        return unless $page;

        $page =~ s/\.p[lm]$//;
        $page =~ s/^\w\<//;    # strip possible B<
        $page =~ s/[^\w:]//g;
    }

    return unless $page;
    $page = $proper_page{$page} if $proper_page{$page};

    $seen_skip{$page}++ if $skip_page{$page};
    return if $skip_page{$page};

    my $section
        = exists $sections{$page} ? $sections{$page}
        : $pm =~ /\.pm$/          ? '3p'
        : $page =~ /::/           ? '3p'
        : $file =~ m{^utils/}     ? '1'
        : $file =~ m{/scripts?/}  ? '1'
        :                           '1';

    # Sometimes we want to pull the pod from a page other than
    # where we find it by default.  If we did, and it still exists
    # keep using it.
    if (exists $old_pod{$page} && -e "$root/$old_pod{$page}{file}") {
        $file = $old_pod{$page}{file};
    }

    $new_pod{$page} = {
        file    => $file,
        section => $section,
    };
};

foreach my $look_in ('cpan', 'dist', '.') {
    find( sub{ $wanted->( $look_in ) }, $look_in);
}

my $changed = 0;
my @file_list;
foreach my $page (sort { 
    $new_pod{$a}{section} cmp $new_pod{$b}{section}
        || lc($a) cmp lc($b) } keys %new_pod) {
    unless ($old_pod{$page}) {
        say "New page: $page [$new_pod{$page}{file}][$new_pod{$page}{section}]";
        $changed++;
    }
    push @file_list, [ $page, @{ $new_pod{$page} }{qw( section file )} ];
}

foreach my $page (sort { 
    $old_pod{$a}{section} cmp $old_pod{$b}{section}
        || $a cmp $b } keys %old_pod) {
    unless ($new_pod{$page}) {
        say "Lost page: $page [$old_pod{$page}{file}][$old_pod{$page}{section}]";
        $changed++;
    }
}

foreach my $page (keys %skip_page) {
    next if $seen_skip{$page};
    print "Can remove $page from \%skip_page\n";
}

unless ($changed) {
    say "No changes";
    exit;
}

my $num_tabs   = 5;
my $tab_length = 8;
open my $ofh, '>', $bsdwrapper . '.new' or die $!;
open my $ifh, '<', $bsdwrapper          or die $!;
while (<$ifh>) {
    if (/for page sect file in/) {
        print $ofh $_;

        foreach my $i ( 0 .. $#file_list ) {
            my $tabs = (
                (     ( $tab_length * $num_tabs )
                    - ( length( $file_list[$i][0] . $file_list[$i][1] ) + 5 )
                ) / $tab_length
            );
            $tabs = 1 if $tabs < 1;
            $tabs++ if $tabs != int $tabs;
            $tabs = "\t" x int($tabs);

            my $fmt = "    %s %s$tabs%s";
            $fmt .= $i == $#file_list ? "\n" : " \\\n";
            printf $ofh $fmt, @{ $file_list[$i] };
        }

        while (<$ifh>) { last unless m{\\$} }
        next;
    }
    print $ofh $_;
}
close $ifh;
close $ofh;

say "Created $bsdwrapper.new";
